apply plugin: 'com.android.application'
apply plugin: 'jacoco'

dependencies {
    // AndroidX dependencies
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.1'

    // Unit Test dependencies
    testImplementation "androidx.arch.core:core-testing:2.2.0"
    testImplementation 'junit:junit:4.13.2'

    // Instrumentation Test dependencies
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
}

jacoco {
    toolVersion = "0.8.12"  // setting JaCoCo plugin version
}

android {
    namespace 'vk.autotest.project'
    compileSdkVersion 35

    defaultConfig {
        applicationId 'vk.autotest.project'
        minSdkVersion 24
        targetSdkVersion 35
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner" // runner for Android (UI instrumented) tests
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules.pro'
        }
        debug {
            enableUnitTestCoverage true     // turn on Unit test JaCoCo coverage
            enableAndroidTestCoverage true      // turn on Android (UI instrumented) tests coverage
        }
    }
    testOptions {
        unitTests.includeAndroidResources = true
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
                excludes = ['jdk.internal.*']
            }
        }
    }
}

tasks.withType(Test).configureEach {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

// Gradle task to make a UI tests for Android app coverage
tasks.register('jacocoUITestReport', JacocoReport) {
    dependsOn['connectedDebugAndroidTest'] // start a task for creating report after compliting UI Test tasks
    reports {    // setting a report file types
        xml.required = true
        html.required = true
    }

    //  directory and files that shouldn't be used in coverage repott (some secondary and java system classes)
    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*',
                      '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    //  directory for compiled classes
    def debugTree = fileTree(dir: "$buildDir/intermediates/javac/debug",
            excludes: fileFilter)   // removing other classes

    sourceDirectories.setFrom(files(["src/main/java"]))     // setting a original code classes source
    classDirectories.setFrom(files([debugTree]))    // setting a dir with marked byb JaCoCo classes
    executionData.setFrom(fileTree(dir: buildDir, includes: [   // setting file with data of Test by processing classes
            'outputs/code_coverage/debugAndroidTest/connected/*/coverage.ec']))     // for Android instrumentd tests is .ec file
    doLast { println "JaCoCo UI report generated" }
}

// Gradle task to make a UNIT tests of clas logic coverage
tasks.register('jacocoUnitTestReport', JacocoReport) {
    dependsOn['testDebugUnitTest']  // start a task for creating report after compliting unit Test tasks
    reports {    // setting a report file types
        xml.required = true
        html.required = true
    }

    //  directory and files that shouldn't be used in coverage repott (some secondary and java system classes)
    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*',
                      '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    //  directory for compiled classes
    def debugTree = fileTree(dir: "$buildDir/intermediates/javac/debug",
            excludes: fileFilter)   // removing other classes
    sourceDirectories.setFrom(files(["src/main/java"]))     // setting a original code classes source
    classDirectories.setFrom(files([debugTree]))    // setting a dir with marked byb JaCoCo classes
    executionData.setFrom(fileTree(dir: buildDir, includes: [   // setting file with data of Test by processing classes
            'outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec']))     // for unit tests is .exec file
    doLast { println "JaCoCo UNIT report generated" }
}

// Gradle task to megre UI and Unit tests result in one report
tasks.register('jacocoFullCoverageReport', JacocoReport) {
    // start a task for creating full report after compliting UI and unit Tests tasks
    dependsOn=['testDebugUnitTest', 'connectedDebugAndroidTest']
    reports {   // setting a report file types
        xml.required = true
        html.required = true
    }

    //  directory and files that shouldn't be used in coverage repott (some secondary and java system classes)
    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*',
                      '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    //  directory for compiled classes
    def debugTree = fileTree(
            dir: "$buildDir/intermediates/javac/debug",
            excludes: fileFilter   // removing other classes
    )

    sourceDirectories.setFrom(files(["$project.projectDir/src/main/java",]))     // setting a original code classes source
    classDirectories.setFrom(files([debugTree]))    // setting a dir with marked byb JaCoCo classes
    // for Full coverage report we need ro use execution test data from UI and Unit test
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [   // setting file with data of Test by processing classes
            'outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec',     // for unit tests is .exec file
            'outputs/code_coverage/debugAndroidTest/connected/*/coverage.ec']))     // for unit tests is .exec file
    doLast { println "Full coverage report generated DONE" }
}