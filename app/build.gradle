apply plugin: 'com.android.application'
apply plugin: 'jacoco'

android {
    namespace 'vk.autotest.project'
    compileSdkVersion 35

    defaultConfig {
        applicationId 'vk.autotest.project'
        minSdkVersion 21
        targetSdkVersion 35
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        viewBinding true
    }
}


dependencies {
    implementation libs.appcompat
    implementation libs.material.v1110
    implementation libs.constraintlayout.v214
    implementation libs.espresso.idling.resource
    implementation libs.ext.junit
    implementation libs.espresso.core
    testImplementation libs.ext.junit
    testImplementation libs.espresso.core.v351
    testImplementation libs.core.testing
}

jacoco {
    toolVersion = "0.8.12"
}


task jacocoUITestReport(type: JacocoReport, dependsOn: ['connectedDebugAndroidTest']) {
    reports {
        xml.required = true
        html.required = true
    }

    def fileFilter = [
            '**/R.class', '**/R$*.class', '**/BuildConfig.*',
            '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*'
    ]

    def debugTree = fileTree(dir: "$buildDir/intermediates/javac/debug", excludes: fileFilter)

    sourceDirectories.setFrom(files(["src/main/java"]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: buildDir, includes: [
            'outputs/code_coverage/debugAndroidTest/connected/Medium_Phone(AVD) - 16/coverage.ec'
    ]))
    doLast {println "JaCoCo UI report generated"}
}

task jacocoUnitTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    reports {
        xml.required = true
        html.required = true
    }

    def fileFilter = [
            '**/R.class', '**/R$*.class', '**/BuildConfig.*',
            '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*'
    ]

    def debugTree = fileTree(dir: "$buildDir/intermediates/javac/debug", excludes: fileFilter)

    sourceDirectories.setFrom(files(["src/main/java"]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: buildDir, includes: [
            'jacoco/testDebugUnitTest.exec',
            'outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec'
    ]))

    doLast {println "JaCoCo UNIT report generated"}
}

task jacocoFullCoverageReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'connectedDebugAndroidTest']) {
    reports {
        xml.required = true
        html.required = true
    }
    def fileFilter = [
            '**/R.class', '**/R$*.class', '**/BuildConfig.*',
            '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*'
    ]
    def debugTree = fileTree(dir: "$buildDir/intermediates/javac/debug", excludes: fileFilter)

    sourceDirectories.setFrom(files(["$project.projectDir/src/main/java"]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(files([
            'outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec',
            'outputs/code_coverage/debugAndroidTest/connected/Medium_Phone(AVD) - 16/coverage.ec'
    ]).filter { it.exists() })

    doLast {
        println "âœ” Full coverage report generated"
    }
}
