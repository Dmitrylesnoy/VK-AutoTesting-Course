apply plugin: 'com.android.application'
apply plugin: 'jacoco'

dependencies {
    // AndroidX dependencies
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.1'
    testImplementation "androidx.arch.core:core-testing:2.2.0"
    // Espresso dependencies
    implementation 'androidx.test.ext:junit:1.2.1'
    implementation 'androidx.test.espresso:espresso-core:3.6.1'

}

jacoco {
    toolVersion = "0.8.12"
}
android {
    namespace 'vk.autotest.project'
    compileSdkVersion 35

    defaultConfig {
        applicationId 'vk.autotest.project'
        minSdkVersion 21
        targetSdkVersion 35
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
//    testOptions {
//        unitTests.includeAndroidResources = true
//        unitTests.all {
//            jacoco {
//                includeNoLocationClasses = true
//                excludes = ['jdk.internal.*']
//            }
//        }
//    }
//    buildFeatures {
//        viewBinding true
//    }
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*','**/*']
}

task jacocoUITestReport(type: JacocoReport, dependsOn: ['connectedDebugAndroidTest']) {
    reports {
        xml.required = true
        html.required = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*',
            '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$buildDir/intermediates/javac/debug", excludes: fileFilter)

    sourceDirectories.setFrom(files(["src/main/java"]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: buildDir, includes: [
            'outputs/code_coverage/debugAndroidTest/connected/*/coverage.ec']))
    doLast {println "JaCoCo UI report generated"}
}

task jacocoUnitTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    reports {
        xml.required = true
        html.required = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*',
            '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']

    def debugTree = fileTree(dir: "$buildDir/intermediates/javac/debug", excludes: fileFilter)

    sourceDirectories.setFrom(files(["src/main/java"]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: buildDir, includes: [
            'outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec']))
    doLast {println "JaCoCo UNIT report generated"}
}


task jacocoFullCoverageReport(type: JacocoReport,dependsOn: ['testDebugUnitTest', 'connectedDebugAndroidTest']) {
    reports {
        xml.required = true
        html.required = true
    }
    def fileFilter = ['**/R.class','**/R$*.class','**/BuildConfig.*',
            '**/Manifest*.*','**/*Test*.*','android/**/*.*','**/*$[0-9].*'    ]
    def javaClasses = fileTree(dir: "$buildDir/intermediates/javac/debug/classes",excludes: fileFilter)

    classDirectories.setFrom(files([javaClasses]))
    sourceDirectories.setFrom(files(["$project.projectDir/src/main/java",]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
            'outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec',
            'outputs/code_coverage/debugAndroidTest/connected/*/coverage.ec']))
    doLast {println "Full coverage report generated DONE"}
}
