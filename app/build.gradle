plugins {
    alias(libs.plugins.android.application)
    id 'jacoco'
}

android {
    namespace 'vk.autotest.project'
    compileSdk 35

    defaultConfig {
        applicationId "vk.autotest.project"
        minSdk 24
        targetSdk 35
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    jacoco {
        version = "0.8.13"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true // Включаем сбор покрытия для тестов
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true // Для учета классов без информации о местоположении
                excludes = ['jdk.internal.*','**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*'] // Исключаем автогенерируемые классы
            }
        }
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    implementation libs.appcompat
    implementation libs.material
    implementation libs.activity
    implementation libs.constraintlayout
    testImplementation libs.junit
    androidTestImplementation libs.ext.junit
    androidTestImplementation libs.espresso.core
    testImplementation "androidx.arch.core:core-testing:2.1.0"
}


tasks.register("jacocoFullReport", JacocoReport) {
    description = "Generates a combined JaCoCo code coverage report for unit and UI tests (debug build)."
    group = "Reporting"
    dependsOn 'testDebugUnitTest', 'connectedDebugAndroidTest'

    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }

    def javaClasses = fileTree(dir: "${buildDir}/intermediates/javac/debug/classes", excludes: [
            '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*'
    ])
    classDirectories.from = files([javaClasses])
    sourceDirectories.from = files(["${project.projectDir}/src/main/java"])
    executionData.from = files(["${buildDir}/jacoco/testDebugUnitTest.exec",
                                "${buildDir}/outputs/code_coverage/debugAndroidTest/connected/coverage.ec"])
    doFirst {
        delete(fileTree(dir: "${buildDir}/outputs/code_coverage/debugAndroidTest/connected/", includes: ["**/*.ec"]))
    }
}

tasks.withType(Test).configureEach { finalizedBy tasks.jacocoFullReport }
